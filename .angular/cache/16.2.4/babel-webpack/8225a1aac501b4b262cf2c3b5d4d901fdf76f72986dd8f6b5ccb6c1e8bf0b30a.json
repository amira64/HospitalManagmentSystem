{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport const STORAGE_KEY = 'appData';\nexport class DataService {\n  constructor() {\n    this.doctors = [];\n    this.patients = [];\n    this.storageKey = 'staffData';\n  }\n  saveData(key, data) {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n  getData(key) {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  }\n  addDoctor(doctor) {\n    doctor.id = this.generateUniqueId();\n    this.doctors.push(doctor);\n  }\n  addPatient(patient) {\n    patient.id = this.generateUniqueId();\n    this.patients.push(patient);\n  }\n  getDoctors() {\n    return this.doctors;\n  }\n  getDoctorById(id) {\n    return this.doctors.find(doctor => doctor.id === id);\n  }\n  updateDoctor(doctor) {\n    const index = this.doctors.findIndex(d => d.id === doctor.id);\n    if (index !== -1) {\n      this.doctors[index] = doctor;\n    }\n  }\n  getPatients() {\n    return this.patients;\n  }\n  getPatientById(id) {\n    return this.patients.find(patient => patient.id === id);\n  }\n  updatePatient(patient) {\n    const index = this.patients.findIndex(p => p.id === patient.id);\n    if (index !== -1) {\n      this.patients[index] = patient;\n    }\n  }\n  generateUniqueId() {\n    return Date.now();\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["STORAGE_KEY","DataService","constructor","doctors","patients","storageKey","saveData","key","data","localStorage","setItem","JSON","stringify","getData","getItem","parse","addDoctor","doctor","id","generateUniqueId","push","addPatient","patient","getDoctors","getDoctorById","find","updateDoctor","index","findIndex","d","getPatients","getPatientById","updatePatient","p","Date","now","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\LENOVO\\Desktop\\h2\\HMS\\src\\app\\data.service.ts"],"sourcesContent":["export const STORAGE_KEY = 'appData';\nimport { Injectable } from '@angular/core';\n\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class DataService {\n  doctors: any[] = [];\n  patients: any[] = [];\n  private storageKey = 'staffData';\n\n  constructor() {\n  }\n\n  saveData(key: string,data: any) {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  getData(key: string): any {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  }\n\n  addDoctor(doctor: any) {\n    doctor.id = this.generateUniqueId();\n    this.doctors.push(doctor);\n  }\n\n  addPatient(patient: any) {\n    patient.id = this.generateUniqueId();\n    this.patients.push(patient);\n  }\n\n  getDoctors() {\n    return this.doctors;\n  }\n\n  getDoctorById(id: number) {\n    return this.doctors.find((doctor) => doctor.id === id);\n  }\n\n  updateDoctor(doctor: any) {\n    const index = this.doctors.findIndex((d) => d.id === doctor.id);\n    if (index !== -1) {\n      this.doctors[index] = doctor;\n    }\n  }\n\n  getPatients() {\n    return this.patients;\n  }\n\n  getPatientById(id: number) {\n    return this.patients.find((patient) => patient.id === id);\n  }\n\n  updatePatient(patient: any) {\n    const index = this.patients.findIndex((p) => p.id === patient.id);\n    if (index !== -1) {\n      this.patients[index] = patient;\n    }\n  }\n\n  private generateUniqueId(): number {\n    return Date.now();\n  }\n}\n"],"mappings":";AAAA,OAAO,MAAMA,WAAW,GAAG,SAAS;AAQpC,OAAM,MAAOC,WAAW;EAKtBC,YAAA;IAJA,KAAAC,OAAO,GAAU,EAAE;IACnB,KAAAC,QAAQ,GAAU,EAAE;IACZ,KAAAC,UAAU,GAAG,WAAW;EAGhC;EAEAC,QAAQA,CAACC,GAAW,EAACC,IAAS;IAC5BC,YAAY,CAACC,OAAO,CAACH,GAAG,EAAEI,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;EACjD;EAEAK,OAAOA,CAACN,GAAW;IACjB,MAAMC,IAAI,GAAGC,YAAY,CAACK,OAAO,CAACP,GAAG,CAAC;IACtC,OAAOC,IAAI,GAAGG,IAAI,CAACI,KAAK,CAACP,IAAI,CAAC,GAAG,IAAI;EACvC;EAEAQ,SAASA,CAACC,MAAW;IACnBA,MAAM,CAACC,EAAE,GAAG,IAAI,CAACC,gBAAgB,EAAE;IACnC,IAAI,CAAChB,OAAO,CAACiB,IAAI,CAACH,MAAM,CAAC;EAC3B;EAEAI,UAAUA,CAACC,OAAY;IACrBA,OAAO,CAACJ,EAAE,GAAG,IAAI,CAACC,gBAAgB,EAAE;IACpC,IAAI,CAACf,QAAQ,CAACgB,IAAI,CAACE,OAAO,CAAC;EAC7B;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACpB,OAAO;EACrB;EAEAqB,aAAaA,CAACN,EAAU;IACtB,OAAO,IAAI,CAACf,OAAO,CAACsB,IAAI,CAAER,MAAM,IAAKA,MAAM,CAACC,EAAE,KAAKA,EAAE,CAAC;EACxD;EAEAQ,YAAYA,CAACT,MAAW;IACtB,MAAMU,KAAK,GAAG,IAAI,CAACxB,OAAO,CAACyB,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACX,EAAE,KAAKD,MAAM,CAACC,EAAE,CAAC;IAC/D,IAAIS,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACxB,OAAO,CAACwB,KAAK,CAAC,GAAGV,MAAM;;EAEhC;EAEAa,WAAWA,CAAA;IACT,OAAO,IAAI,CAAC1B,QAAQ;EACtB;EAEA2B,cAAcA,CAACb,EAAU;IACvB,OAAO,IAAI,CAACd,QAAQ,CAACqB,IAAI,CAAEH,OAAO,IAAKA,OAAO,CAACJ,EAAE,KAAKA,EAAE,CAAC;EAC3D;EAEAc,aAAaA,CAACV,OAAY;IACxB,MAAMK,KAAK,GAAG,IAAI,CAACvB,QAAQ,CAACwB,SAAS,CAAEK,CAAC,IAAKA,CAAC,CAACf,EAAE,KAAKI,OAAO,CAACJ,EAAE,CAAC;IACjE,IAAIS,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACvB,QAAQ,CAACuB,KAAK,CAAC,GAAGL,OAAO;;EAElC;EAEQH,gBAAgBA,CAAA;IACtB,OAAOe,IAAI,CAACC,GAAG,EAAE;EACnB;EAAC,QAAAC,CAAA,G;qBA3DUnC,WAAW;EAAA;EAAA,QAAAoC,EAAA,G;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EAHV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}