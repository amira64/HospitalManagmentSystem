{"ast":null,"code":"import { STORAGE_KEY } from 'src/app/data.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/data.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction PatientListComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function PatientListComponent_tr_13_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const patient_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.editPatient(patient_r1));\n    });\n    i0.ɵɵtext(7, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\u00A0\\u00A0 \");\n    i0.ɵɵelementStart(9, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function PatientListComponent_tr_13_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const patient_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.deletePatient(patient_r1));\n    });\n    i0.ɵɵtext(10, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const patient_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(patient_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(patient_r1.age);\n  }\n}\nexport class PatientListComponent {\n  constructor(dataService, router) {\n    this.dataService = dataService;\n    this.router = router;\n    this.patients = [];\n    this.storageKey = 'patientsData';\n  }\n  ngOnInit() {\n    this.loadPatientsFromStorage();\n  }\n  loadPatientsFromStorage() {\n    const storedData = this.dataService.getData(STORAGE_KEY);\n    if (storedData && storedData.patients) {\n      this.patients = storedData.patients;\n    }\n  }\n  saveData() {\n    const data = {\n      patients: this.patients\n    };\n    this.dataService.saveData(STORAGE_KEY, data);\n  }\n  addPatient(name) {\n    const patientId = this.generateUniqueId();\n    const newPatient = {\n      id: patientId,\n      name\n    };\n    this.patients.push(newPatient);\n    this.saveData();\n  }\n  generateUniqueId() {\n    return Math.floor(Math.random() * 1000000);\n  }\n  savePatientsToLocalStorage() {\n    localStorage.setItem('patients', JSON.stringify(this.patients));\n  }\n  editPatient(patientId) {\n    this.router.navigate(['patients/edit-patient/:id', patientId]);\n  }\n  deletePatient(patient) {\n    const index = this.patients.indexOf(patient);\n    if (index !== -1) {\n      this.patients.splice(index, 1);\n      console.log('Deleting patient:', patient);\n    }\n  }\n  static #_ = this.ɵfac = function PatientListComponent_Factory(t) {\n    return new (t || PatientListComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PatientListComponent,\n    selectors: [[\"app-patient-list\"]],\n    decls: 14,\n    vars: 1,\n    consts: [[1, \"patient-list\"], [1, \"styled-table\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function PatientListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Patients List\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"table\", 1)(4, \"thead\")(5, \"tr\")(6, \"th\");\n        i0.ɵɵtext(7, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"th\");\n        i0.ɵɵtext(9, \"Age\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\");\n        i0.ɵɵtext(11, \"Actions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"tbody\");\n        i0.ɵɵtemplate(13, PatientListComponent_tr_13_Template, 11, 2, \"tr\", 2);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngForOf\", ctx.patients);\n      }\n    },\n    dependencies: [i3.NgForOf],\n    styles: [\"\\n\\ntable[_ngcontent-%COMP%] {\\n    width: 100%;\\n    border-collapse: collapse;\\n    border-spacing: 0;\\n  }\\n  \\n  table[_ngcontent-%COMP%], th[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n    border: 1px solid #ccc;\\n  }\\n  \\n  th[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n    padding: 10px;\\n    text-align: center; \\n\\n  }\\n  \\n  \\n\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGF0aWVudHMvcGF0aWVudC1saXN0L3BhdGllbnQtbGlzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQjtBQUMxQjtJQUNJLFdBQVc7SUFDWCx5QkFBeUI7SUFDekIsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0Usc0JBQXNCO0VBQ3hCOztFQUVBO0lBQ0UsYUFBYTtJQUNiLGtCQUFrQixFQUFFLDBDQUEwQztFQUNoRTs7RUFFQSxxQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBDU1MgZm9yIHRhYmxlIHN0eWxpbmcgKi9cbnRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xuICB9XG4gIFxuICB0YWJsZSwgdGgsIHRkIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICB9XG4gIFxuICB0aCwgdGQge1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyAvKiBDZW50ZXItYWxpZ24gdGhlIGNvbnRlbnQgd2l0aGluIGNlbGxzICovXG4gIH1cbiAgXG4gIC8qIEFkZCBhZGRpdGlvbmFsIHN0eWxpbmcgYXMgbmVlZGVkICovXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["STORAGE_KEY","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","PatientListComponent_tr_13_Template_button_click_6_listener","restoredCtx","ɵɵrestoreView","_r3","patient_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","editPatient","PatientListComponent_tr_13_Template_button_click_9_listener","ctx_r4","deletePatient","ɵɵadvance","ɵɵtextInterpolate","name","age","PatientListComponent","constructor","dataService","router","patients","storageKey","ngOnInit","loadPatientsFromStorage","storedData","getData","saveData","data","addPatient","patientId","generateUniqueId","newPatient","id","push","Math","floor","random","savePatientsToLocalStorage","localStorage","setItem","JSON","stringify","navigate","patient","index","indexOf","splice","console","log","_","ɵɵdirectiveInject","i1","DataService","i2","Router","_2","selectors","decls","vars","consts","template","PatientListComponent_Template","rf","ctx","ɵɵtemplate","PatientListComponent_tr_13_Template","ɵɵproperty"],"sources":["C:\\Users\\LENOVO\\Desktop\\h2\\HMS\\src\\app\\patients\\patient-list\\patient-list.component.ts","C:\\Users\\LENOVO\\Desktop\\h2\\HMS\\src\\app\\patients\\patient-list\\patient-list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { DataService } from 'src/app/data.service';\nimport { STORAGE_KEY } from 'src/app/data.service';\n\n\n\n@Component({\n  selector: 'app-patient-list',\n  templateUrl: './patient-list.component.html',\n  styleUrls: ['./patient-list.component.css']\n})\nexport class PatientListComponent implements OnInit {\n\n  constructor(private dataService: DataService,private router:Router) {}\n\n  patients: any[] = [];\n  private storageKey = 'patientsData';\n \n  ngOnInit() {\n    this.loadPatientsFromStorage();\n  }\n\n  loadPatientsFromStorage() {\n    const storedData = this.dataService.getData(STORAGE_KEY);\n    if (storedData && storedData.patients) {\n      this.patients = storedData.patients;\n    }\n  }\n\n  saveData() {\n    const data = { patients: this.patients };\n    this.dataService.saveData(STORAGE_KEY, data);\n  }\n\n  addPatient(name: string) {\n    const patientId = this.generateUniqueId();\n    const newPatient = { id: patientId, name };\n    this.patients.push(newPatient);\n    this.saveData();\n  }\n\n  private generateUniqueId() {\n    return Math.floor(Math.random() * 1000000);\n  }\n\n  private savePatientsToLocalStorage() {\n    localStorage.setItem('patients', JSON.stringify(this.patients));\n  }\n\n  editPatient(patientId: number) {\n    this.router.navigate(['patients/edit-patient/:id', patientId]);\n  }\n\n  deletePatient(patient: any) {\n    const index = this.patients.indexOf(patient);\n    if (index !== -1) {\n      this.patients.splice(index, 1);\n      console.log('Deleting patient:', patient);\n    }\n  }\n}\n","<div class=\"patient-list\">\n  <h2>Patients List</h2>\n  <table class=\"styled-table\">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let patient of patients\">\n        <td>{{ patient.name }}</td>\n        <td>{{ patient.age }}</td>\n        <td>\n          <button (click)=\"editPatient(patient)\">Edit</button>&nbsp;&nbsp;\n          <button (click)=\"deletePatient(patient)\">Delete</button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}