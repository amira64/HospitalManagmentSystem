import { makeEnvironmentProviders } from "@angular/core";
import { IDB_DB_NAME, IDB_DB_VERSION, IDB_STORE_NAME, LS_PREFIX } from "./tokens";
/**
 * Allows to add a prefix before `localStorage` keys.
 * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.
 * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**
 *
 * @example
 * bootstrapApplication(AppComponent, {
 *   providers: [provideLocalStoragePrefix('custom_')]
 * });
 *
 * @example
 * NgModule({
 *   providers: [provideLocalStoragePrefix('custom_')]
 * })
 * export class AppModule
 */
export function provideLocalStoragePrefix(prefix) {
    return makeEnvironmentProviders([{ provide: LS_PREFIX, useValue: prefix }]);
}
/**
 * Allows to change the name used for `indexedDB` database.
 * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.
 * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**
 *
 * @example
 * bootstrapApplication(AppComponent, {
 *   providers: [provideIndexedDBDataBaseName('custom')]
 * });
 *
 * @example
 * NgModule({
 *   providers: [provideIndexedDBDataBaseName('custom')]
 * })
 * export class AppModule
 */
export function provideIndexedDBDataBaseName(name) {
    return makeEnvironmentProviders([{ provide: IDB_DB_NAME, useValue: name }]);
}
/**
 * Allows to change the database version used for `indexedDB` database.
 * Must be an unsigned **integer**.
 * **Use with caution as the creation of the store depends on the version.**
 * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.
 * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**
 *
 * @example
 * bootstrapApplication(AppComponent, {
 *   providers: [provideIndexedDBDataBaseVersion(2)]
 * });
 *
 * @example
 * NgModule({
 *   providers: [provideIndexedDBDataBaseVersion(2)]
 * })
 * export class AppModule
 */
export function provideIndexedDBDataBaseVersion(version) {
    return makeEnvironmentProviders([{ provide: IDB_DB_VERSION, useValue: version }]);
}
/**
 * Allows to change the name used for `indexedDB` object store.
 * *Use only* for interoperability with other APIs.
 * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**
 *
 * @example
 * bootstrapApplication(AppComponent, {
 *   providers: [provideIndexedDBStoreName('custom')]
 * });
 *
 * @example
 * NgModule({
 *   providers: [provideIndexedDBStoreName('custom')]
 * })
 * export class AppModule
 */
export function provideIndexedDBStoreName(name) {
    return makeEnvironmentProviders([{ provide: IDB_STORE_NAME, useValue: name }]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXB3YS9sb2NhbC1zdG9yYWdlL3NyYy9saWIvcHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0Isd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsRjs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxNQUFNLFVBQVUseUJBQXlCLENBQUMsTUFBYztJQUV0RCxPQUFPLHdCQUF3QixDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFOUUsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQU0sVUFBVSw0QkFBNEIsQ0FBQyxJQUFZO0lBRXZELE9BQU8sd0JBQXdCLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUU5RSxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0gsTUFBTSxVQUFVLCtCQUErQixDQUFDLE9BQWU7SUFFN0QsT0FBTyx3QkFBd0IsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRXBGLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxNQUFNLFVBQVUseUJBQXlCLENBQUMsSUFBWTtJQUVwRCxPQUFPLHdCQUF3QixDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFakYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudmlyb25tZW50UHJvdmlkZXJzLCBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSURCX0RCX05BTUUsIElEQl9EQl9WRVJTSU9OLCBJREJfU1RPUkVfTkFNRSwgTFNfUFJFRklYIH0gZnJvbSBcIi4vdG9rZW5zXCI7XG5cbi8qKlxuICogQWxsb3dzIHRvIGFkZCBhIHByZWZpeCBiZWZvcmUgYGxvY2FsU3RvcmFnZWAga2V5cy5cbiAqICpVc2Ugb25seSogZm9yIGludGVyb3BlcmFiaWxpdHkgd2l0aCBvdGhlciBBUElzIG9yIHRvIGF2b2lkIGNvbGxpc2lvbiBmb3IgbXVsdGlwbGUgYXBwcyBvbiB0aGUgc2FtZSBzdWJkb21haW4uXG4gKiAqKldBUk5JTkc6IGRvIG5vdCBjaGFuZ2UgdGhpcyBvcHRpb24gaW4gYW4gYXBwIGFscmVhZHkgZGVwbG95ZWQgaW4gcHJvZHVjdGlvbiwgYXMgcHJldmlvdXNseSBzdG9yZWQgZGF0YSB3b3VsZCBiZSBsb3N0LioqXG4gKlxuICogQGV4YW1wbGVcbiAqIGJvb3RzdHJhcEFwcGxpY2F0aW9uKEFwcENvbXBvbmVudCwge1xuICogICBwcm92aWRlcnM6IFtwcm92aWRlTG9jYWxTdG9yYWdlUHJlZml4KCdjdXN0b21fJyldXG4gKiB9KTtcbiAqXG4gKiBAZXhhbXBsZVxuICogTmdNb2R1bGUoe1xuICogICBwcm92aWRlcnM6IFtwcm92aWRlTG9jYWxTdG9yYWdlUHJlZml4KCdjdXN0b21fJyldXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUxvY2FsU3RvcmFnZVByZWZpeChwcmVmaXg6IHN0cmluZyk6IEVudmlyb25tZW50UHJvdmlkZXJzIHtcblxuICByZXR1cm4gbWFrZUVudmlyb25tZW50UHJvdmlkZXJzKFt7IHByb3ZpZGU6IExTX1BSRUZJWCwgdXNlVmFsdWU6IHByZWZpeCB9XSk7XG5cbn1cblxuLyoqXG4gKiBBbGxvd3MgdG8gY2hhbmdlIHRoZSBuYW1lIHVzZWQgZm9yIGBpbmRleGVkREJgIGRhdGFiYXNlLlxuICogKlVzZSBvbmx5KiBmb3IgaW50ZXJvcGVyYWJpbGl0eSB3aXRoIG90aGVyIEFQSXMgb3IgdG8gYXZvaWQgY29sbGlzaW9uIGZvciBtdWx0aXBsZSBhcHBzIG9uIHRoZSBzYW1lIHN1YmRvbWFpbi5cbiAqICoqV0FSTklORzogZG8gbm90IGNoYW5nZSB0aGlzIG9wdGlvbiBpbiBhbiBhcHAgYWxyZWFkeSBkZXBsb3llZCBpbiBwcm9kdWN0aW9uLCBhcyBwcmV2aW91c2x5IHN0b3JlZCBkYXRhIHdvdWxkIGJlIGxvc3QuKipcbiAqXG4gKiBAZXhhbXBsZVxuICogYm9vdHN0cmFwQXBwbGljYXRpb24oQXBwQ29tcG9uZW50LCB7XG4gKiAgIHByb3ZpZGVyczogW3Byb3ZpZGVJbmRleGVkREJEYXRhQmFzZU5hbWUoJ2N1c3RvbScpXVxuICogfSk7XG4gKlxuICogQGV4YW1wbGVcbiAqIE5nTW9kdWxlKHtcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZUluZGV4ZWREQkRhdGFCYXNlTmFtZSgnY3VzdG9tJyldXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUluZGV4ZWREQkRhdGFCYXNlTmFtZShuYW1lOiBzdHJpbmcpOiBFbnZpcm9ubWVudFByb3ZpZGVycyB7XG5cbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhbeyBwcm92aWRlOiBJREJfREJfTkFNRSwgdXNlVmFsdWU6IG5hbWUgfV0pO1xuXG59XG5cbi8qKlxuICogQWxsb3dzIHRvIGNoYW5nZSB0aGUgZGF0YWJhc2UgdmVyc2lvbiB1c2VkIGZvciBgaW5kZXhlZERCYCBkYXRhYmFzZS5cbiAqIE11c3QgYmUgYW4gdW5zaWduZWQgKippbnRlZ2VyKiouXG4gKiAqKlVzZSB3aXRoIGNhdXRpb24gYXMgdGhlIGNyZWF0aW9uIG9mIHRoZSBzdG9yZSBkZXBlbmRzIG9uIHRoZSB2ZXJzaW9uLioqXG4gKiAqVXNlIG9ubHkqIGZvciBpbnRlcm9wZXJhYmlsaXR5IHdpdGggb3RoZXIgQVBJcyBvciB0byBhdm9pZCBjb2xsaXNpb24gZm9yIG11bHRpcGxlIGFwcHMgb24gdGhlIHNhbWUgc3ViZG9tYWluLlxuICogKipXQVJOSU5HOiBkbyBub3QgY2hhbmdlIHRoaXMgb3B0aW9uIGluIGFuIGFwcCBhbHJlYWR5IGRlcGxveWVkIGluIHByb2R1Y3Rpb24sIGFzIHByZXZpb3VzbHkgc3RvcmVkIGRhdGEgd291bGQgYmUgbG9zdC4qKlxuICpcbiAqIEBleGFtcGxlXG4gKiBib290c3RyYXBBcHBsaWNhdGlvbihBcHBDb21wb25lbnQsIHtcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZUluZGV4ZWREQkRhdGFCYXNlVmVyc2lvbigyKV1cbiAqIH0pO1xuICpcbiAqIEBleGFtcGxlXG4gKiBOZ01vZHVsZSh7XG4gKiAgIHByb3ZpZGVyczogW3Byb3ZpZGVJbmRleGVkREJEYXRhQmFzZVZlcnNpb24oMildXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUluZGV4ZWREQkRhdGFCYXNlVmVyc2lvbih2ZXJzaW9uOiBudW1iZXIpOiBFbnZpcm9ubWVudFByb3ZpZGVycyB7XG5cbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhbeyBwcm92aWRlOiBJREJfREJfVkVSU0lPTiwgdXNlVmFsdWU6IHZlcnNpb24gfV0pO1xuXG59XG5cbi8qKlxuICogQWxsb3dzIHRvIGNoYW5nZSB0aGUgbmFtZSB1c2VkIGZvciBgaW5kZXhlZERCYCBvYmplY3Qgc3RvcmUuXG4gKiAqVXNlIG9ubHkqIGZvciBpbnRlcm9wZXJhYmlsaXR5IHdpdGggb3RoZXIgQVBJcy5cbiAqICoqV0FSTklORzogZG8gbm90IGNoYW5nZSB0aGlzIG9wdGlvbiBpbiBhbiBhcHAgYWxyZWFkeSBkZXBsb3llZCBpbiBwcm9kdWN0aW9uLCBhcyBwcmV2aW91c2x5IHN0b3JlZCBkYXRhIHdvdWxkIGJlIGxvc3QuKipcbiAqXG4gKiBAZXhhbXBsZVxuICogYm9vdHN0cmFwQXBwbGljYXRpb24oQXBwQ29tcG9uZW50LCB7XG4gKiAgIHByb3ZpZGVyczogW3Byb3ZpZGVJbmRleGVkREJTdG9yZU5hbWUoJ2N1c3RvbScpXVxuICogfSk7XG4gKlxuICogQGV4YW1wbGVcbiAqIE5nTW9kdWxlKHtcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZUluZGV4ZWREQlN0b3JlTmFtZSgnY3VzdG9tJyldXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUluZGV4ZWREQlN0b3JlTmFtZShuYW1lOiBzdHJpbmcpOiBFbnZpcm9ubWVudFByb3ZpZGVycyB7XG5cbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhbeyBwcm92aWRlOiBJREJfU1RPUkVfTkFNRSwgdXNlVmFsdWU6IG5hbWUgfV0pO1xuXG59XG4iXX0=